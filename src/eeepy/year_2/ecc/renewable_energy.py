#!/usr/bin/env python3
"""Functions and equations related to renewable energy."""
import math
from enum import Enum
from typing import Iterable, Union


class SystemType(Enum):
    """The type of system used by the PV system."""
    StandAlone = 1.3  # 25-30%
    Motor = 3


def power_consumption(Wh: Union[Iterable, float], *argc) -> float:
    """Calculates the power consumption demand for a PV system.

    :param Wh: The watt-hour of an applicance or a list of watt-hours of
    appliances.
    :param argc: The watt-hour of additional appliances. This is only used
    when the Wh is not a list.
    :returns: The power consumption demand.
    """
    if isinstance(Wh, Iterable):
        total = sum(Wh)
    else:
        total = Wh
        total += sum(argc)

    return total * 1.3


def pv_size(Wh: float, gen_factor: float, pv_wp: float) -> int:
    """Calculates the size (number) of the PV modules.

    :param Wh: The power consumption of the system.
    :param gen_factor: The generation factor of the location.
    :param pv_wp: The watt-peak of the PV module being used.
    :returns: The number of PV modules needed.
    """
    Wp: float = Wh / gen_factor
    N: int = math.ceil(Wp / pv_wp)

    return N


def inverter_size(total_power: float, system_type: SystemType) -> float:
    """Calculates the inverter size needed for a PV system."""
    return total_power * system_type.value


def battery_size(Wh: float, nominal: float, days: int) -> float:
    """Calcultes the battery capacity (Ah) needed for a PV system.

    :param Wh: The total Watt-hours per day used by appliances.
    :param nominal: The nominal battery voltage.
    :param days: The number of days of autonomy.
    :returns: The battery capacity.
    """
    res = Wh / 0.85  # Battery loss
    res /= 0.6  # Depth of discharge
    res /= nominal
    return res * days


def controller_size(I_SC: float, N: int) -> float:
    """Calculates the solar charge controller rating of the PV system.

    This function only works for charge controller without MPPT.

    :param I_SC: The shor circuit current.
    :param N: The number of PV cell.
    :returns: The solar charge controller rating.
    """
    return I_SC * 1.3 * N


def fill_factor(P_max: float, V_OC: float, I_SC: float) -> float:
    """Calculates the fill factor of a PV module.

    FF = P_max / V_OC / I_SC

    :param P_max: The maximum power generated by the PV module.
    :param V_OC: The open circuit voltage of the PV module.
    :param I_SC: The short circuit current of the PV module.
    :returns: The fill factor.
    """
    return P_max / V_OC / I_SC


class HydroOutput:
    """Hydroelectric output power equation.

    P_o = ηρQgH
    ----------------------------------------------------
    P_o is the output power.
    η is the efficiency of the turbine.
    ρ is the density of water (1000 kg/m^3)
    Q is the volumetric flow rate (m^3/s).
    g is the gravitational acceleration.
    H is the height difference between inlet and outlet.
    """
    @staticmethod
    def output_power(eta: float, Q: float, H: float) -> float:
        """Calculates the hydroelectric output power.

        :param eta: The efficiency of the turbine.
        :param Q: The volumetric flow rate.
        :param H: The height difference between inlet and outlet.
        :returns: The hydroelectric output power.
        """
        return eta * 1000 * Q * 9.81 * H

    @staticmethod
    def flow_rate(P_o: float, eta: float, H: float) -> float:
        """Calculates the flow rate of the water.

        :param eta: The efficiency of the turbine.
        :param P_o: The hydroelectric output power.
        :param H: The height difference between inlet and outlet.
        :returns: The volumetric flow rate.
        """
        return P_o / eta / 1000 / 9.81 / H
